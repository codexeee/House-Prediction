# -*- coding: utf-8 -*-
"""Interactive Housing Data Dashboard (PKR)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JmKYk8FgWtzM58nvmmfxE6ZkOkrSrgZh
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.preprocessing import MinMaxScaler

# Set page configuration
st.set_page_config(layout="wide", page_title="Advanced Housing Data Dashboard (PKR)", page_icon="üè†")

# --- Conversion Rate ---
# Assuming original currency is INR
INR_TO_PKR_RATE = 3.4

# Custom CSS for styling
st.markdown("""
<style>
    .reportview-container {
        background: #f0f2f6;
    }
    .sidebar .sidebar-content {
        background: #ffffff;
    }
    h1, h2, h3 {
        color: #1f77b4;
    }
    .stButton>button {
        color: #ffffff;
        background-color: #1f77b4;
        border-radius: 5px;
        padding: 10px 20px;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 24px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f0f2f6;
        border-radius: 4px 4px 0px 0px;
        gap: 1px;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    .stTabs [aria-selected="true"] {
        background-color: #ffffff;
    }
</style>
""", unsafe_allow_html=True)


# Load and preprocess the data
@st.cache_data
def load_and_prep_data():
    df = pd.read_csv('Housing.csv')
    df_display = pd.read_csv('Housing.csv')

    # --- Convert price to PKR ---
    df['price'] = df['price'] * INR_TO_PKR_RATE
    df_display['price'] = df_display['price'] * INR_TO_PKR_RATE

    # Handling categorical variables with binary outcomes
    binary_vars = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']
    df[binary_vars] = df[binary_vars].apply(lambda x: x.map({'yes': 1, 'no': 0}))

    # Handling furnishingstatus with one-hot encoding
    furnishing_status = pd.get_dummies(df['furnishingstatus'], drop_first=True, prefix='furnishing')
    df = pd.concat([df, furnishing_status], axis=1)
    df.drop(['furnishingstatus'], axis=1, inplace=True)

    return df, df_display

df, df_display = load_and_prep_data()


# --- Model Training ---
@st.cache_resource
def train_models(df):
    # Multiple Linear Regression
    features = df.columns.drop('price')
    X_multi = df[features]
    y_multi = df['price']

    X_train_multi, X_test_multi, y_train_multi, y_test_multi = train_test_split(X_multi, y_multi, test_size=0.3, random_state=42)

    scaler = MinMaxScaler()
    X_train_multi[X_train_multi.columns] = scaler.fit_transform(X_train_multi[X_train_multi.columns])
    X_test_multi[X_test_multi.columns] = scaler.transform(X_test_multi[X_test_multi.columns])

    multi_model = LinearRegression()
    multi_model.fit(X_train_multi, y_train_multi)

    # Simple Linear Regression
    X_simple = df[['area']]
    y_simple = df['price']
    X_train_simple, X_test_simple, y_train_simple, y_test_simple = train_test_split(X_simple, y_simple, test_size=0.3, random_state=42)
    simple_model = LinearRegression()
    simple_model.fit(X_train_simple, y_train_simple)

    return simple_model, multi_model, X_train_simple, X_test_simple, y_train_simple, y_test_simple, X_train_multi, X_test_multi, y_train_multi, y_test_multi, scaler

simple_model, multi_model, X_train_simple, X_test_simple, y_train_simple, y_test_simple, X_train_multi, X_test_multi, y_train_multi, y_test_multi, scaler = train_models(df)


# Main title
st.title("üè† Advanced Housing Data Dashboard (PKR)")
st.markdown("A comprehensive and interactive dashboard to explore, visualize, and model housing data.")

# --- TABS ---
tab1, tab2, tab3, tab4 = st.tabs(["Data Overview", "Interactive Visualizations", "Regression Analysis", "Predict House Price"])

with tab1:
    st.header("Data Exploration")
    st.markdown("Get a first look at the dataset and its properties. Prices are shown in PKR.")
    st.dataframe(df_display)

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Data Info")
        st.text(f"Dataset Shape: {df.shape}")
        st.text(f"Missing Values: {df_display.isnull().sum().sum()}")
        st.text(f"Duplicate Records: {df_display.duplicated().sum()}")
    with col2:
        st.subheader("Data Types")
        st.dataframe(df_display.dtypes.astype(str), use_container_width=True)

    st.header("Descriptive Statistics")
    quantitative_vars = ['price', 'area', 'bedrooms', 'bathrooms', 'stories', 'parking']
    st.dataframe(df_display[quantitative_vars].describe().round(2))

    st.header("Data Distributions")
    dist_selection = st.selectbox("Select a variable to see its distribution:", quantitative_vars)
    fig_dist = px.histogram(df_display, x=dist_selection, nbins=30, title=f'Distribution of {dist_selection.title()}', marginal="box")
    st.plotly_chart(fig_dist, use_container_width=True)

with tab2:
    st.header("Visual Analysis")

    # Scatter plot: Price vs Area
    st.subheader("Price vs. Area")
    fig_scatter = px.scatter(df_display, x='area', y='price', color='airconditioning',
                             hover_data=['bedrooms', 'bathrooms'],
                             title='Price vs. Area with Air Conditioning',
                             labels={'price': 'Price (PKR)', 'area': 'Area (sq. ft.)'})
    st.plotly_chart(fig_scatter, use_container_width=True)

    # Box plots for categorical features vs price
    st.subheader("Categorical Features vs. Price")
    qualitative_vars = ['mainroad', 'guestroom', 'basement', 'hotwaterheating',
                       'airconditioning', 'prefarea', 'furnishingstatus']
    selected_feature = st.selectbox("Select a feature to compare with price:", qualitative_vars)
    fig_box = px.box(df_display, x=selected_feature, y='price', color=selected_feature,
                     title=f'Price Distribution by {selected_feature.title()}',
                     labels={'price': 'Price (PKR)'})
    st.plotly_chart(fig_box, use_container_width=True)

    # Correlation Heatmap
    st.subheader("Correlation Heatmap")
    corr = df.corr()
    fig_heatmap = go.Figure(data=go.Heatmap(
                       z=corr.values,
                       x=corr.columns,
                       y=corr.columns,
                       hoverongaps=False,
                       colorscale='Viridis'))
    fig_heatmap.update_layout(title='Correlation Matrix of Housing Features')
    st.plotly_chart(fig_heatmap, use_container_width=True)

with tab3:
    st.header("Regression Model Analysis")

    # Simple Linear Regression
    y_pred_simple = simple_model.predict(X_test_simple)
    simple_r2 = r2_score(y_test_simple, y_pred_simple)
    simple_rmse = np.sqrt(mean_squared_error(y_test_simple, y_pred_simple))

    # Multiple Linear Regression
    y_pred_multi = multi_model.predict(X_test_multi)
    multi_r2 = r2_score(y_test_multi, y_pred_multi)
    multi_rmse = np.sqrt(mean_squared_error(y_test_multi, y_pred_multi))

    st.subheader("Model Performance Comparison")
    model_comparison = pd.DataFrame({
        'Model': ['Simple Linear Regression (Area)', 'Multiple Linear Regression'],
        'R¬≤ Score': [f"{simple_r2:.4f}", f"{multi_r2:.4f}"],
        'RMSE (PKR)': [f"{simple_rmse:,.2f}", f"{multi_rmse:,.2f}"]
    })
    st.table(model_comparison)

    st.subheader("Multiple Linear Regression: Feature Importance")
    st.markdown("Feature importance is determined by the absolute value of the model coefficients.")

    feature_importance = pd.DataFrame({
        'feature': X_train_multi.columns,
        'importance': np.abs(multi_model.coef_)
    }).sort_values('importance', ascending=False)

    fig_importance = px.bar(feature_importance, x='importance', y='feature', orientation='h',
                            title='Feature Importance in Multiple Linear Regression Model')
    st.plotly_chart(fig_importance, use_container_width=True)

with tab4:
    st.header("Predict House Price")
    st.markdown("Use the trained Multiple Linear Regression model to predict the price of a house in PKR.")

    with st.form("prediction_form"):
        col1, col2, col3 = st.columns(3)
        with col1:
            area = st.number_input("Area (sq. ft.)", min_value=1000, max_value=20000, value=3500, step=100)
            bedrooms = st.slider("Bedrooms", 1, 6, 3)
            bathrooms = st.slider("Bathrooms", 1, 4, 2)
            stories = st.slider("Stories", 1, 4, 2)
        with col2:
            parking = st.slider("Parking Spaces", 0, 4, 1)
            mainroad = st.radio("Main Road Access", ["Yes", "No"], index=0)
            guestroom = st.radio("Guest Room", ["Yes", "No"], index=1)
            basement = st.radio("Basement", ["Yes", "No"], index=1)
        with col3:
            hotwater = st.radio("Hot Water Heating", ["Yes", "No"], index=1)
            aircon = st.radio("Air Conditioning", ["Yes", "No"], index=0)
            prefarea = st.radio("Preferred Area", ["Yes", "No"], index=1)
            furnishing = st.selectbox("Furnishing Status", ["furnished", "semi-furnished", "unfurnished"])

        submit_button = st.form_submit_button(label='Predict Price')

    if submit_button:
        # Create a dataframe from user inputs
        input_data = {
            'area': area, 'bedrooms': bedrooms, 'bathrooms': bathrooms, 'stories': stories,
            'mainroad': 1 if mainroad == 'Yes' else 0,
            'guestroom': 1 if guestroom == 'Yes' else 0,
            'basement': 1 if basement == 'Yes' else 0,
            'hotwaterheating': 1 if hotwater == 'Yes' else 0,
            'airconditioning': 1 if aircon == 'Yes' else 0,
            'parking': parking,
            'prefarea': 1 if prefarea == 'Yes' else 0,
            'furnishing_semi-furnished': 1 if furnishing == 'semi-furnished' else 0,
            'furnishing_unfurnished': 1 if furnishing == 'unfurnished' else 0,
        }
        input_df = pd.DataFrame([input_data])

        # Ensure columns are in the same order as training data
        input_df = input_df[X_train_multi.columns]

        # Scale the input data
        input_scaled = scaler.transform(input_df)

        # Predict the price
        prediction = multi_model.predict(input_scaled)

        st.success(f"Predicted House Price: **PKR {prediction[0]:,.2f}**")

st.sidebar.title("About")
st.sidebar.info("This dashboard provides a detailed analysis of housing data, including data exploration, visualization, and predictive modeling. It's built using Streamlit, Plotly, and Scikit-learn.")